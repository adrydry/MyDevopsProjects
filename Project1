PROJECT1: INSTALL JENKINS ON AWS EC2 INSTANCE, INTEGRATE GIT, MAVEN, TOMCAT, TERRAFORM

Jenkins is a CI CD tool that help to automate all activities related to building, testing and deploying Java applications. It's one of the most CICD tool because, it's an open source and can be integrated with multiple others tools. For our project, we will work on AWS cloud platform. To execute this project, we will follow the steps below:
        A - INSTALL JENKINS
1- Create an EC2 instance on AWS and name it Jenkins Server. In this project, we will work with Ubuntu;
2- Connect this machine to the server using Gitbash. We can also use Putty or Mobaxterm as well;
3- Become a root user by execute the command : sudo su -;
4- Update the repository: apt-get update -y;
5- Install Java. Java is a prerequisite before any installation of Jenkins. To install java, we must follow some steps:
    - Execute: apt install default-jdk  - This command will install directly the compatible version of Java with your OS;
    - Check the installation of Java by using: java --version;
    - After Java is installed, we need to define the environnement variable of the Java file (JAVA_HOME, PATH);
    - Execute the command : file $(which java). A symbolic link, will appear. Copy it;
    - To know where the file is located, execute : file + symbolic link;
    - Go to the home directory with cd ~ and execute ls -la to see all the files or directories for the home directory. We will see a file name .bash_profile. Open this file by usind the command vi;
    - Inside the file define Java_Home and the path. Save and quit the file;
    - To verify if the environnement variable is effectively set, just execute first source .bash_profile, and next echo $JAVA_HOME and echo $PATH. 
    
    Now Java is installed and the environnement variable is set, we can installed Jenkins. To install Jenkins, go to google and tape Jenkins download. Select the first link and choose the command to execute depending on your OS.
    In our case, we will just copy the link and paste it in our command like this: wget link.   The command wget will help us to douwnload the jenkins war. After downloading, the jenkins war, we need to install it by using the command java -jar jenkins.war
    Now jenkins is install and a password is automatically generated by the system.
    To verify, the installation of jenkins, just paste in google, the Public adress of our ec2 with the default Jenkins port 8080 ---Ip:8080. After enter, the jenkins page appear.
    Great, our jenkins server is ready!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    Troubleshooting, check:
     1 - the security group of your instance. May be port 8080 is not allowed as an inbound traffic
     2 - the .bash_profile: May be the environnement variable is not well set
       
       B - CONFIGURE JENKINS SERVER
       
     We need to configure the Jenkins server, so that it can run a java project. Copy the generated password and paste on the jenkins page. Install suggested plugins and create your admin user. Go to Global tool Configuration and select under JDK, JDK installations. 
     Specify the name (JAVA_HOME) and the path (we can do echo $PATH and we have the path), apply and save. 
     Now let us create a sample code and see if our jenkins server can run it
     Go to select an item, we give the name "myfirstproject", choose a freestyle project and click on ok. at the end of the page, we choose under Build "Execute Shell" and write : echo "Welcome to this DevOps projects". Apply and save.
     Now one job is ready and we can now build it by clicking on Build now. Check the console output: Finished Success.
     
     Our first job is running on the jenkins server
     
        C - INTEGRATED GIT
     In the same running jenkins server, we need to install Git. Git is a Version Source Code Management. It helps to manage all the modifications of the code. 
     To install Git, we follow the steps below:
      1 - Become a sudo with sudo su -;
      2 - sudo apt-get install git -y
      3 - Check git installation with git --version
      4-Go to the jenkins page and go to manage Plugins. Select on the available plugins, Github and just choose the Github plugins related to our project. Click on install without restart
      All the selected github plugins are now installed.
      5- We need also to define the path of Git. So, go to Manage Jenkins and see at the end of the page Git. Specify the name (Git) and the path (/usr/bin/git). Apply and save
      Git is now integrated to my jenkins server...great!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      
        D - INTEGRATE MAVEN
        Maven is a build tool that help to package the code in an artifact. To integrate Maven, we need to install it through these steps:
      1- in our CLI, specify the directory where maven libraries will be located: cd /opt. Inside the opt directory, go on google and paste download maven. Copy the link of the bin.tar and paste it in the CLI with wget at the beginning
      2- execute ls. the tar file is here and need to be unzip with the command: root@Jenkins:/opt# tar -xvzf apache-maven-3.8.7-bin.tar.gz
      3- inside the opt directory, execute mv (tar file) maven: root@Jenkins:/opt# mv apache-maven-3.8.7 maven
      4- Go to the home directory and open the .bash_profile and set the environnement variable for M2 and M2_HOME. Save and quit
      5- exit, connect as a root and execute echo $M2 and echo $M2_HOME
      6- go to jenkins console and manage plugins. Go to avalaible plugins and select maven integration and maven invoker
      7- Now, we need to set the environnement variable of Maven in jenkins sonsole. Go to global configuration tool, put M2_HOME as a name and /opt/maven as a path. Apply and save
      8- Go to dashbord and create a new maven project Myfirstmaven. Inside this new project, describe the project, define the git repository. At the level build (Goal and options), put clean install package. Apply and save
      9- Build the new job. Check the console output SUCCESS. Great!!!!!!!!!!!!!!!!!!!!!!!!!!
      10- the path of the war file is availaible. You can go to this path with cd, and with ls, we will see the webapp.war. Our artifact is avalaible 
 
        E - INTEGRATE TOMCAT
       In the CICD process, Tomcat is installed on the QA and PROD environnement. To install Tomcat, follow the steps below:
       1- Create a new EC2 instance name Tomcatserver
       2- Go to google and tape tomcat download. In our case, we will download tomcat 9. Go to opt directory to store all the librairies of tomcat cd /opt. Now, copy the link of the tar file and paste it in the CLI : wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.70/bin/apache-tomcat-9.0.70.tar.gz
       3- The apache tomcat file is availaible and we have to unzip it. Execute the command tar -xvzf apache-tomcat-9.0.70.tar.gz. and ls. the unzip file is availaible
       4- Move the apache file in a new tomcat directory by the command mv apache-tomcat-9.0.70 tomcat. Go to the tomcat directory and list the content with ls. We will see a bin directory, go in this directory with cd /bin, list the contents. We will see startup file. Try to open, we will not work because java is not installed
       5- Install java: sudo apt install default-jdk. Now check the file where tomcat librairies are installed: file $(which java). we obtained a link. execute file + link= the path
       6- Go to the home directory and open the bash_profile. Set up the environnement variable (java home and Path), save and quit
       7- Go to cd /opt/tomcat/bin and list the contents. execute ./startup sh and now Tomcat is started
       8- To verify, take the ip adress of the tomcat server and map with the port 8080. Yeaahhh Tomcat 
       9- Click on manager app and we see that the access is denied. So that's means, our application will not be visible from outside. We need to change the configuration of the context.xml file
       10- Check the context files: find / -type f |grep context.xml. 4 files appeared and we have to configure each file with the webapp path. So open each file and configure
       11- Go again to manager App and when you click, now the system ask you the username and the password. We don't have these informations. So you need, to provide the role by modifying the tomcat-users.xml file located in cd /opt/tomcat/conf
       12- After defining for each role, a username and password, save and quit the file. Go to tomcat console and enter a username and a password. Tomcat server is open!!!!!!!!!!!!!Great
       13- Go to Jenkins and manage the plugins. Install the plugins deploy to container and create a new maven projet (Deploytomcat)
       14- Fill the git url, at buils (goal and option) put clean install package, at post build (put **/*war), add a container (tomcat 9) and click on add credentials, put the url of the tomcat server, apply and save
       
    
    



